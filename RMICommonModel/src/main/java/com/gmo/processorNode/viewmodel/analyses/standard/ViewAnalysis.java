package com.gmo.processorNode.viewmodel.analyses.standard;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.logging.log4j.Logger;

import com.gmo.logger.Log4JLogger;
import com.gmo.processorNode.viewmodel.BSDownloadInfo;
import com.gmo.processorNode.viewmodel.ViewCreateProcessConfiguration;
import com.gmo.processorNode.viewmodel.ViewFile;
import com.gmo.sharedobjects.model.analysis.AnalysisStatus;
import com.gmo.sharedobjects.model.reports.Report;

public class ViewAnalysis {

	private static Logger LOG = Log4JLogger.logger;

	private String id;

	private String userid;

	private int progress;

	// Configuration generated by the view
	private ViewCreateProcessConfiguration viewConfiguration;

	private long launchDate;

	private long completionDate;

	private final static DateFormat df = new SimpleDateFormat("dd-MM-yyyy HH:mm");

	private AnalysisStatus status;

	private List<ViewFile> additionalAnalyses;

	private BSDownloadInfo downloadInfo;

	// Associated report
	private Report report;

	public ViewAnalysis() {
		this.additionalAnalyses = new ArrayList<>();
		progress = 0;
		completionDate = -1;
		status = AnalysisStatus.IDLE;
		downloadInfo = new BSDownloadInfo();
	}

	public long getLaunchDate() {
		return launchDate;
	}

	public void setLaunchDate(long laundDate) {
		this.launchDate = laundDate;
	}

	public String getLaunchDateFormat() {
		return df.format(new Date(launchDate));
	}

	public void setLaunchDateFormat(String laundDateFormat) {
	}

	public long getCompletionDate() {
		return completionDate;
	}

	public void setCompletionDate(long endDate) {
		this.completionDate = endDate;
	}

	public int getProgress() {
		return progress;
	}

	public void setProgress(int progress) {
		this.progress = progress;
	}

	public String getCompletionDateFormat() {
		return df.format(new Date(completionDate));
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getUserid() {
		return userid;
	}

	public void setUserid(String userid) {
		this.userid = userid;
	}

	public AnalysisStatus getStatus() {
		return status;
	}

	public synchronized void setStatus(AnalysisStatus newstatus) {
		this.status = newstatus;
	}

	public Report getReport() {
		return report;
	}

	public void setReport(Report report) {
		this.report = report;
	}

	public ViewCreateProcessConfiguration getViewConfiguration() {
		return viewConfiguration;
	}

	public void setViewConfiguration(ViewCreateProcessConfiguration viewConfiguration) {
		this.viewConfiguration = viewConfiguration;
	}

	public List<ViewFile> getAdditionalAnalyses() {
		return additionalAnalyses;
	}

	public void setAdditionalAnalyses(List<ViewFile> additionalAnalyses) {
		this.additionalAnalyses = additionalAnalyses;
	}

	public void deleteAdditionalReport(String filename) {

		ViewFile deleted = null;
		for (ViewFile vf : additionalAnalyses) {
			if (vf.getName().equals(filename)) {
				File result = new File(vf.getId());
				if (!result.exists()) {
					LOG.debug("File does not exists. Unable to delete " + filename);
					deleted = vf;
				} else {
					boolean success = result.delete();
					if (success) {
						deleted = vf;
					} else {
						LOG.warn("No file was deleted.");
					}
					break;
				}
			}
		}
		if (deleted != null) {
			additionalAnalyses.remove(deleted);
		}
	}

	public BSDownloadInfo getDownloadInfo() {
		return downloadInfo;
	}

	public void setDownloadInfo(BSDownloadInfo downloadInfo) {
		this.downloadInfo = downloadInfo;
	}

}
